name: Linux

on:
  push:
    branches:
      - master
#    tags-ignore:
#      - "**"
#    paths-ignore:
#      - "**.md"
#      - "**.yaml"
#      - "**.yml"
#  pull_request:
#    paths-ignore:
#      - "**.md"
#      - "**.yaml"
#      - "**.yml"

jobs:
#  golang:
#    name: Build (Go ${{ matrix.go }}, PHP ${{ matrix.php }}, OS ${{matrix.os}})
#    runs-on: ${{ matrix.os }}
#    timeout-minutes: 60
#    strategy:
#      fail-fast: true
#      matrix:
#        php: ["8.1"]
#        go: ["1.17.7"]
#        os: ["ubuntu-latest"]
#    steps:
#      - name: Set up Go ${{ matrix.go }}
#        uses: actions/setup-go@v2 # action page: <https://github.com/actions/setup-go>
#        with:
#          go-version: ${{ matrix.go }}
#
#      - name: Set up PHP ${{ matrix.php }}
#        uses: shivammathur/setup-php@v2 # action page: <https://github.com/shivammathur/setup-php>
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: sockets
#
#      - name: Check out code
#        uses: actions/checkout@v2
#
#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
#
#      - name: Init Composer Cache # Docs: <https://git.io/JfAKn#php---composer>
#        uses: actions/cache@v2
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
#          restore-keys: ${{ runner.os }}-composer-
#
#      - name: Install Composer dependencies
#        run: cd php_test_files && composer update --prefer-dist --no-progress --ansi
#
#      - name: Init Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
#        uses: actions/cache@v2
#        with:
#          path: ~/go/pkg/mod
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#          restore-keys: ${{ runner.os }}-go-
#
#      - name: Install Go dependencies
#        run: go mod download
#
#      - name: Install protoc
#        uses: arduino/setup-protoc@v1
#        with:
#          version: '3.x'
#
#      - name: Run golang tests with coverage
#        env:
#          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
#          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
#          RR_TEST_ENV: ${{ secrets.RR_TEST_ENV }}
#          RR_SQS_TEST_ENDPOINT: ${{ secrets.RR_SQS_TEST_ENDPOINT }}
#          RR_SQS_TEST_REGION: ${{ secrets.RR_SQS_TEST_REGION }}
#          RR_SQS_TEST_KEY: ${{ secrets.RR_SQS_TEST_KEY }}
#          RR_SQS_TEST_SECRET: ${{ secrets.RR_SQS_TEST_SECRET }}
#
#        run: make test_coverage
#
#      - uses: codecov/codecov-action@v2 # Docs: <https://github.com/codecov/codecov-action>
#        with:
#          file: ./coverage-ci/summary.txt
#          fail_ci_if_error: false

  temporal_test:
    name: Build (Go ${{ matrix.go }}, PHP ${{ matrix.php }}, OS ${{matrix.os}})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: true
      matrix:
        php: ["8.1"]
        go: ["1.17.7"]
        os: ["ubuntu-latest"]
    steps:
      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v2 # action page: <https://github.com/actions/setup-go>
        with:
          go-version: ${{ matrix.go }}

      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2 # action page: <https://github.com/shivammathur/setup-php>
        with:
          php-version: ${{ matrix.php }}
          extensions: sockets

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Init Composer Cache # Docs: <https://git.io/JfAKn#php---composer>
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: cd php_test_files && composer update --prefer-dist --no-progress --ansi

      - name: Init Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Install protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: Run golang tests with coverage
        run: make temporal_test

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: temporal-coverage
          path: ./coverage-ci/summary.txt


  service_test:
    name: Build (Go ${{ matrix.go }}, PHP ${{ matrix.php }}, OS ${{matrix.os}})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: true
      matrix:
        php: ["8.1"]
        go: ["1.17.7"]
        os: ["ubuntu-latest"]
    steps:
      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v2 # action page: <https://github.com/actions/setup-go>
        with:
          go-version: ${{ matrix.go }}

      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2 # action page: <https://github.com/shivammathur/setup-php>
        with:
          php-version: ${{ matrix.php }}
          extensions: sockets

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Init Composer Cache # Docs: <https://git.io/JfAKn#php---composer>
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: cd php_test_files && composer update --prefer-dist --no-progress --ansi

      - name: Init Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Install protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: Run golang tests with coverage
        run: make service_test

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: service-coverage
          path: ./coverage-ci/summary.txt

  #  golang:
  #    name: Build (Go ${{ matrix.go }}, PHP ${{ matrix.php }}, OS ${{matrix.os}})
  #    runs-on: ${{ matrix.os }}
  #    timeout-minutes: 60
  #    strategy:
  #      fail-fast: true
  #      matrix:
  #        php: ["8.1"]
  #        go: ["1.17.7"]
  #        os: ["ubuntu-latest"]
  #    steps:
  #      - name: Set up Go ${{ matrix.go }}
  #        uses: actions/setup-go@v2 # action page: <https://github.com/actions/setup-go>
  #        with:
  #          go-version: ${{ matrix.go }}
  #
  #      - name: Set up PHP ${{ matrix.php }}
  #        uses: shivammathur/setup-php@v2 # action page: <https://github.com/shivammathur/setup-php>
  #        with:
  #          php-version: ${{ matrix.php }}
  #          extensions: sockets
  #
  #      - name: Check out code
  #        uses: actions/checkout@v2
  #
  #      - name: Get Composer Cache Directory
  #        id: composer-cache
  #        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
  #
  #      - name: Init Composer Cache # Docs: <https://git.io/JfAKn#php---composer>
  #        uses: actions/cache@v2
  #        with:
  #          path: ${{ steps.composer-cache.outputs.dir }}
  #          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
  #          restore-keys: ${{ runner.os }}-composer-
  #
  #      - name: Install Composer dependencies
  #        run: cd php_test_files && composer update --prefer-dist --no-progress --ansi
  #
  #      - name: Init Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
  #        uses: actions/cache@v2
  #        with:
  #          path: ~/go/pkg/mod
  #          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #          restore-keys: ${{ runner.os }}-go-
  #
  #      - name: Install Go dependencies
  #        run: go mod download
  #
  #      - name: Install protoc
  #        uses: arduino/setup-protoc@v1
  #        with:
  #          version: '3.x'
  #
  #      - name: Run golang tests with coverage
  #        env:
  #          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
  #          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
  #          RR_TEST_ENV: ${{ secrets.RR_TEST_ENV }}
  #          RR_SQS_TEST_ENDPOINT: ${{ secrets.RR_SQS_TEST_ENDPOINT }}
  #          RR_SQS_TEST_REGION: ${{ secrets.RR_SQS_TEST_REGION }}
  #          RR_SQS_TEST_KEY: ${{ secrets.RR_SQS_TEST_KEY }}
  #          RR_SQS_TEST_SECRET: ${{ secrets.RR_SQS_TEST_SECRET }}
  #
  #        run: make test_coverage
  #
  #      - uses: codecov/codecov-action@v2 # Docs: <https://github.com/codecov/codecov-action>
  #        with:
  #          file: ./coverage-ci/summary.txt
  #          fail_ci_if_error: false

  codecov:
    name: Upload codecov
    runs-on: ubuntu-latest
    needs:
      - service_test
      - temporal_test
    timeout-minutes: 60
    steps:
      - name: Download code coverage results
        uses: actions/download-artifact@v2
        run: |
          ls
#          echo 'mode: atomic' > ./coverage-ci/summary.txt
#  tail -q -n +2 ./coverage-ci/*.out >> ./coverage-ci/summary.txt
#  sed -i '2,$${/roadrunner/!d}' ./coverage-ci/summary.txt
#  docker-compose -f env/docker-compose.yaml kill
#  docker-compose -f env/docker-compose.yaml down


